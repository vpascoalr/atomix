/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.protocols.rsm.election.v1;

import "v1/headers.proto";
import "gogoproto/gogo.proto";

// LeaderElection is a service for a leader election primitive
service LeaderElection {
    // Enter enters the leader election
    rpc Enter (EnterRequest) returns (EnterResponse);

    // Withdraw withdraws a candidate from the leader election
    rpc Withdraw (WithdrawRequest) returns (WithdrawResponse);

    // Anoint anoints a candidate leader
    rpc Anoint (AnointRequest) returns (AnointResponse);

    // Promote promotes a candidate
    rpc Promote (PromoteRequest) returns (PromoteResponse);

    // Demote demotes a candidate
    rpc Demote (DemoteRequest) returns (DemoteResponse);

    // Evict evicts a candidate from the election
    rpc Evict (EvictRequest) returns (EvictResponse);

    // GetTerm gets the current leadership term
    rpc GetTerm (GetTermRequest) returns (GetTermResponse);

    // Watch watches the election for events
    rpc Watch (WatchRequest) returns (stream WatchResponse);
}

message EnterRequest {
    atomix.protocols.rsm.v1.ProposalRequestHeaders headers = 1;
    EnterInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message EnterResponse {
    atomix.protocols.rsm.v1.ProposalResponseHeaders headers = 1;
    EnterOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message WithdrawRequest {
    atomix.protocols.rsm.v1.ProposalRequestHeaders headers = 1;
    WithdrawInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message WithdrawResponse {
    atomix.protocols.rsm.v1.ProposalResponseHeaders headers = 1;
    WithdrawOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message AnointRequest {
    atomix.protocols.rsm.v1.ProposalRequestHeaders headers = 1;
    AnointInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message AnointResponse {
    atomix.protocols.rsm.v1.ProposalResponseHeaders headers = 1;
    AnointOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message PromoteRequest {
    atomix.protocols.rsm.v1.ProposalRequestHeaders headers = 1;
    PromoteInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message PromoteResponse {
    atomix.protocols.rsm.v1.ProposalResponseHeaders headers = 1;
    PromoteOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message DemoteRequest {
    atomix.protocols.rsm.v1.ProposalRequestHeaders headers = 1;
    DemoteInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message DemoteResponse {
    atomix.protocols.rsm.v1.ProposalResponseHeaders headers = 1;
    DemoteOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message EvictRequest {
    atomix.protocols.rsm.v1.ProposalRequestHeaders headers = 1;
    EvictInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message EvictResponse {
    atomix.protocols.rsm.v1.ProposalResponseHeaders headers = 1;
    EvictOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message GetTermRequest {
    atomix.protocols.rsm.v1.QueryRequestHeaders headers = 1;
    GetTermInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message GetTermResponse {
    atomix.protocols.rsm.v1.QueryResponseHeaders headers = 1;
    GetTermOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message WatchRequest {
    atomix.protocols.rsm.v1.QueryRequestHeaders headers = 1;
    WatchInput input = 2 [
        (gogoproto.embed) = true
    ];
}

message WatchResponse {
    atomix.protocols.rsm.v1.QueryResponseHeaders headers = 1;
    WatchOutput output = 2 [
        (gogoproto.embed) = true
    ];
}

message LeaderElectionSnapshot {
    uint64 term = 1 [
        (gogoproto.casttype) = "github.com/vpascoalr/atomix/protocols/rsm/api/v1.Index"
    ];
    LeaderElectionCandidate leader = 2;
    repeated LeaderElectionCandidate candidates = 3 [
        (gogoproto.nullable) = false
    ];
}

message LeaderElectionCandidate {
    string name = 1;
    uint64 session_id = 2 [
        (gogoproto.customname) = "SessionID",
        (gogoproto.casttype) = "github.com/vpascoalr/atomix/protocols/rsm/api/v1.SessionID"
    ];
}

message LeaderElectionInput {
    oneof input {
        EnterInput enter = 1;
        WithdrawInput withdraw = 2;
        AnointInput anoint = 3;
        PromoteInput promote = 4;
        DemoteInput demote = 8;
        EvictInput evict = 5;
        GetTermInput get_term = 6;
        WatchInput watch = 7;
    }
}

message LeaderElectionOutput {
    oneof output {
        EnterOutput enter = 1;
        WithdrawOutput withdraw = 2;
        AnointOutput anoint = 3;
        PromoteOutput promote = 4;
        DemoteOutput demote = 8;
        EvictOutput evict = 5;
        GetTermOutput get_term = 6;
        WatchOutput watch = 7;
    }
}

message EnterInput {
    string candidate = 1;
}

message EnterOutput {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message WithdrawInput {
    string candidate = 1;
}

message WithdrawOutput {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message AnointInput {
    string candidate = 1;
}

message AnointOutput {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message PromoteInput {
    string candidate = 2;
}

message PromoteOutput {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message DemoteInput {
    string candidate = 2;
}

message DemoteOutput {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message EvictInput {
    string candidate = 1;
}

message EvictOutput {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message GetTermInput {

}

message GetTermOutput {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message WatchInput {

}

message WatchOutput {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message Term {
    string leader = 1;
    repeated string candidates = 2;
    uint64 index = 3 [
        (gogoproto.casttype) = "github.com/vpascoalr/atomix/protocols/rsm/api/v1.Index"
    ];
}
