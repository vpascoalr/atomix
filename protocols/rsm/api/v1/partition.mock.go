// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vpascoalr/atomix/protocols/rsm/api/v1 (interfaces: PartitionServer)

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPartitionServer is a mock of PartitionServer interface.
type MockPartitionServer struct {
	ctrl     *gomock.Controller
	recorder *MockPartitionServerMockRecorder
}

// MockPartitionServerMockRecorder is the mock recorder for MockPartitionServer.
type MockPartitionServerMockRecorder struct {
	mock *MockPartitionServer
}

// NewMockPartitionServer creates a new mock instance.
func NewMockPartitionServer(ctrl *gomock.Controller) *MockPartitionServer {
	mock := &MockPartitionServer{ctrl: ctrl}
	mock.recorder = &MockPartitionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartitionServer) EXPECT() *MockPartitionServerMockRecorder {
	return m.recorder
}

// CloseSession mocks base method.
func (m *MockPartitionServer) CloseSession(arg0 context.Context, arg1 *CloseSessionRequest) (*CloseSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSession", arg0, arg1)
	ret0, _ := ret[0].(*CloseSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseSession indicates an expected call of CloseSession.
func (mr *MockPartitionServerMockRecorder) CloseSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSession", reflect.TypeOf((*MockPartitionServer)(nil).CloseSession), arg0, arg1)
}

// KeepAlive mocks base method.
func (m *MockPartitionServer) KeepAlive(arg0 context.Context, arg1 *KeepAliveRequest) (*KeepAliveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeepAlive", arg0, arg1)
	ret0, _ := ret[0].(*KeepAliveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeepAlive indicates an expected call of KeepAlive.
func (mr *MockPartitionServerMockRecorder) KeepAlive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepAlive", reflect.TypeOf((*MockPartitionServer)(nil).KeepAlive), arg0, arg1)
}

// OpenSession mocks base method.
func (m *MockPartitionServer) OpenSession(arg0 context.Context, arg1 *OpenSessionRequest) (*OpenSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSession", arg0, arg1)
	ret0, _ := ret[0].(*OpenSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSession indicates an expected call of OpenSession.
func (mr *MockPartitionServerMockRecorder) OpenSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSession", reflect.TypeOf((*MockPartitionServer)(nil).OpenSession), arg0, arg1)
}